---
---
<div id="three-canvas"></div>

<script>
  import * as THREE from 'three';
  import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
  import terrainVertexShader from '../shaders/terrain.vert?raw';
  import terrainFragmentShader from '../shaders/terrain.frag?raw';

  // Settings
  const CAMERA_OFFSET = new THREE.Vector3(0, 1, 5);

  const container = document.getElementById('three-canvas') as HTMLDivElement;
  let scene: THREE.Scene | null = null;
  let camera: THREE.PerspectiveCamera | null = null;
  let renderer: THREE.WebGLRenderer | null = null;
  let controls: OrbitControls | null = null;

  const handleResize = () => {
    if (!container || !camera || !renderer) return;
    camera.aspect = container.clientWidth / container.clientHeight;
    renderer.setSize(container.clientWidth, container.clientHeight);
    camera.updateProjectionMatrix();
  }


  // Shader uniforms (global variables passed to shader)
  const terrainUniforms = {
    uTime: { value: 0 },
    uElevation: { value: 8.0 }
  };

  const initScene = () => {
    scene = new THREE.Scene();

    camera = new THREE.PerspectiveCamera( 75, container.clientWidth / container.clientHeight, 0.1, 1000 );
    camera.position.x = CAMERA_OFFSET.x;
    camera.position.y = CAMERA_OFFSET.y;
    camera.position.z = CAMERA_OFFSET.z;

    renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize( container.clientWidth, container.clientHeight );
    renderer.setPixelRatio( window.devicePixelRatio );

    container.appendChild( renderer.domElement );

    controls = new OrbitControls( camera, renderer.domElement );
    controls.update()

    // Terrain
    const TERRAIN_SIZE = 50;
    const TERRAIN_SEGMENTS = 1000;
    
    const terrainGeometry = new THREE.PlaneGeometry( TERRAIN_SIZE, TERRAIN_SIZE, TERRAIN_SEGMENTS, TERRAIN_SEGMENTS );

    // Custom shader material
    const terrainMaterial = new THREE.ShaderMaterial({
      wireframe: true,
      uniforms: terrainUniforms,
      vertexShader: terrainVertexShader,
      fragmentShader: terrainFragmentShader
    });

    const terrain = new THREE.Mesh( terrainGeometry, terrainMaterial );
    terrain.rotation.x = -Math.PI / 2;
    scene.add( terrain );

  }

  // const initActors = () => {
  //   if (!scene) return;
  //   const geometry = new THREE.BoxGeometry( 1, 1, 1 );
  //   const material = new THREE.MeshBasicMaterial( { color: 0x00ff00, wireframe: true } );
  //   const cube = new THREE.Mesh( geometry, material );

  //   scene.add( cube );
  //   window.addEventListener("tick", () => {
  //     cube.rotation.x += 0.01;
  //     cube.rotation.y += 0.01;
  //   });
  // }

  initScene();
  handleResize();
  // initActors();

  window.addEventListener('resize', handleResize);

  const animate = () => {
    requestAnimationFrame(animate);

    // Update time uniform for animated terrain
    terrainUniforms.uTime.value += 0.01;

    renderer?.render(scene as THREE.Scene, camera as THREE.PerspectiveCamera);
    controls?.update();
  }

  animate();

  // Handle window resize
  window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera?.updateProjectionMatrix();
    renderer?.setSize(window.innerWidth, window.innerHeight);
  });

</script>

<style>
  #three-canvas {
    width: 100%;
    height: 100%;
    overflow: hidden;
    position: relative;

    canvas {
      width: 100%;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
      z-index: 1;
    }
  }
</style>