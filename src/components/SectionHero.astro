---
import VideoStream from "./VideoStream.astro";
import Button from "./Button.astro";
import Design from "../icons/design.svg"
import Code from "../icons/code.svg"
import Commerce from "../icons/commerce.svg"
import ThreeScene from "../components/3DScene.astro";
import ProjectCard from "../components/ProjectCard.astro";
import IconGrid from "../icons/grid.svg";

const { subheading, button, projects } = Astro.props;
---
<section class="hero">
  <div class="media">
    <ThreeScene />
  </div>
  <div class="content">
    <div class="section-header">
      <div class="section-title">
        <p class="caption">{subheading}</p>
        <Button 
          label={button.text}
          url="/work"
          icon={IconGrid}
        />
      </div>
      <div class="icons">
        <Design class="icon" />
        <Code class="icon" />
        <Commerce class="icon" />
      </div>
    </div>
    <div class="ticker" data-active="false">
      <svg class="ticker-line" width="100%" height="2" preserveAspectRatio="none">
        <line x1="0" y1="1" x2="100%" y2="1" stroke="currentColor" stroke-width="1" stroke-dasharray="12 2" />
      </svg>
      <div class="ticker-track" id="ticker">
        <span class="ticker-item ticker-time utility" id="time">12:00 PM EST</span>
        <span class="ticker-item ticker-location utility" id="location">Brooklyn, NYC, USA</span>
        <span class="ticker-item ticker-temperature utility" data-icon="clear" id="temperature">70F</span>
      </div>
      <svg class="ticker-line" width="100%" height="2" preserveAspectRatio="none">
        <line x1="0" y1="1" x2="100%" y2="1" stroke="currentColor" stroke-width="1" stroke-dasharray="12 2" />
      </svg>
    </div>
    <div class="projects">
      {projects.map((project, i) => (
        <ProjectCard key={i} project={project} />
      ))}
      <!-- <ProjectCard /> -->
    </div>
    
    <!-- {subtitle && <p>{subtitle}</p>} -->
    <!-- {title && <h1>{title}</h1>} -->
  </div>

  <p
    class="brand" 
    id="logo-secondaary"
    data-animate-scroll="true"
    style="--scroll-progress: 0;"
  >Hardin</p>
</section>

<script>
  import { lenis } from '../lib/lenis-provider.js';
  import IconClear from "../icons/weather/Clear.svg?raw";
  import IconCloudy from "../icons/weather/Cloudy.svg?raw";
  import IconDrizzle from "../icons/weather/Drizzle.svg?raw";
  import IconRain from "../icons/weather/Rain.svg?raw";
  import IconSnow from "../icons/weather/Snow.svg?raw";
  import IconThunderstorm from "../icons/weather/Thunderstorm.svg?raw";

  // console.log(IconThunderstorm)

  const WEATHER_LONGITUDE = -73.959435;
  const WEATHER_LATITUDE = 40.717056;

  const scrollThreshold = 200;

  document.addEventListener('astro:page-load', () => {
    const tickerElement = document.getElementById('ticker');
    if (!tickerElement) return;

    // Track cleanup functions
    let timeInterval: NodeJS.Timeout | null = null;

    const updateTime = (element: HTMLElement) => {
      if (!element) return;
      const now = new Date();
      const options: Intl.DateTimeFormatOptions = {
        timeZone: 'America/New_York',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: true,
        timeZoneName: 'short'
      };
      const timeString = now.toLocaleTimeString('en-US', options);
      element.textContent = timeString;
    }

    let currentWeather: {
      temperature: number;
      conditionsID: number;
      main: string;
      conditionsDescription: string;
    } | null = null;

    let weatherElement: string | null = null;

    const getWeather = async (element: HTMLElement) => {
    
      if (!currentWeather) {
        const weatherData = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=New York&appid=${import.meta.env.PUBLIC_OPEN_WEATHER_API_KEY}&units=imperial`);
        const data = await weatherData.json();
        currentWeather = {
          temperature: data.main.temp,
          conditionsID: data.weather[0].id,
          main: data.weather[0].main,
          conditionsDescription: data.weather[0].description,
        }
        if (!currentWeather.main) return;
        switch (currentWeather.main) {
          case "Thunderstorm":
            weatherElement = IconThunderstorm;
            break;
          case "Drizzle":
            weatherElement = IconDrizzle;
            break;
          case "Rain":
            weatherElement = IconRain;
            break;
          case "Snow":
            weatherElement = IconSnow;
            break;
          case "Atmosphere":
            weatherElement = IconSnow;
            break;
          case "Clear":
            weatherElement = IconClear;
            break;
          case "Clouds":
            weatherElement = IconCloudy;
            break;
          default:
            break;
        }
      }
      element.innerHTML =`${weatherElement} ${Math.floor(currentWeather.temperature) + 'F'}`;
    }

    const duplicateChildren = () => {
      if (!tickerElement) return;
      const duplicateNodeCount = 3;
      const cloneNodes = [];
      const timeElements: HTMLElement[] = [];
      const weatherElements: HTMLElement[] = [];

      for (let i = 0; i < duplicateNodeCount; i++) {
        for (const child of tickerElement.children) {

          // Queue for cloning
          const newNode = child.cloneNode(true) as HTMLElement;

          // Collect time elements for batch updates
          if (child.classList.contains('ticker-time')) {
            if (i === 0) timeElements.push(child as HTMLElement);
            timeElements.push(newNode);
          }

          // Collect weather elements for batch updates
          if (child.classList.contains('ticker-temperature')) {
            if (i === 0) weatherElements.push(child as HTMLElement);
            weatherElements.push(newNode);
          }

          cloneNodes.push(newNode);
        }
      }
      tickerElement.append(...cloneNodes);
      tickerElement.dataset.active = 'true';

      // Initialize weather once, then update all elements
      getWeather(weatherElements[0]).then(() => {
        // After fetching weather, update all elements with the cached data
        weatherElements.slice(1).forEach(el => getWeather(el));
      });

      // Single interval to update all time elements at once
      timeElements.forEach(el => updateTime(el));
      timeInterval = setInterval(() => {
        timeElements.forEach(el => updateTime(el));
      }, 1000);
    }

    // Cleanup function
    const cleanup = () => {
      if (timeInterval) {
        clearInterval(timeInterval);
        timeInterval = null;
      }
    };

    duplicateChildren();

    // Cleanup on page navigation
    document.addEventListener('astro:before-preparation', cleanup, { once: true });

  });

</script>

<style>
	.hero {
		width: 100%;
		height: calc(100dvh - var(--header-height));
		position: relative;
    display: flex;
    flex-direction: row;
    justify-content: stretch;
    align-items: stretch;
    padding-inline: var(--page-margin);
    padding-block: var(--space-2xl) var(--page-margin);
    gap: var(--page-margin);

    .media,
    .content {
      flex: 0 0 calc(50% - var(--page-margin) / 2);
    }

    .media {
      background-color: var(--color-background);
      border-radius: var(--radius-xl);
      overflow: hidden;
      border: 1px solid var(--color-foreground);
      /* background: 
        linear-gradient(var(--color-background) 0 0) padding-box,
        linear-gradient(-45deg, var(--color-foreground), var(--color-background)) border-box;
      border: 2px solid transparent;
      border-radius: 15px; */
      /* border: 1px solid linear-gradient(0deg, var(--color-background), var(--color-foreground)); */
    }

    .content {
      /* background-color: red; */
      display: flex;
      flex-direction: column;
      justify-content: stretch;
      align-items: stretch;
      gap: var(--space-2xs);
      overflow: hidden;

      .section-header {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: flex-start;
        gap: var(--space-xs);
        margin-bottom: var(--space-md);

        .section-title {
          display: flex;
          flex-direction: column;
          align-items: flex-start;
          gap: var(--space-2xs);
          max-width: 18rem;
          text-align: justify;
        }

        .icons {
          display: flex;
          flex-direction: row;
          justify-content: flex-end;
          align-items: center;
          gap: var(--space-2xs);

          .icon {
            width: var(--icon-sm);
            height: var(--icon-sm);
          }
        }

      }

      .ticker {
        display: flex;
        flex-direction: column;
        align-items: stretch;
        overflow: hidden;
        max-width: 100%;
        gap: 0.1rem;

        &:hover .ticker-track {
          animation-play-state: paused;
        }

        .ticker-track {
          display: flex;
          flex-direction: row;
          /* justify-content: space-between; */
          align-items: center;
          overflow: hidden;
          min-width: max-content;
          animation: ticker-animation 10s linear infinite;
          animation-play-state: paused;
          will-change: transform;
          /* Force GPU acceleration for smoother animation */
          transform: translateZ(0);
          backface-visibility: hidden;

          &[data-active="true"]:not(:hover) {
            animation-play-state: running;
          }

          .ticker-item {
            flex: 1 0 auto;
            display: flex;
            flex-direction: row;
            align-items: center;

            svg {
              width: 1.2em;
              height: 1.2em;
              margin-right: 0.25em;
            }

            &::after {
              content: "Â·";
              margin-inline: 1ch;
            }
          }
        }

      }
    }

    .projects {
      display: flex;
      flex-direction: row;
      justify-content: stretch;
      /* align-items: stretch; */
      gap: var(--space-3xs);

      & > * {
        flex: 0 1 50%;
      }
    }

	}

  .brand {
    position: absolute;
    bottom: var(--page-margin);
    right: var(--page-margin);
    --font-max: 19.4vw;
    --font-min: 2rem;
    --font-range: calc(var(--font-max) - var(--font-min));
    font-size: calc(var(--font-max) - var(--scroll-progress) * var(--font-range));
    /* font-size: calc(15vw * var(--scroll-progress)); */
    letter-spacing: -0.05em;
    margin-block: 0 -0.18em;
    pointer-events: none;
  }

  @keyframes ticker-animation {
    0% {
      transform: translate3d(0, 0, 0);
    }
    100% {
      transform: translate3d(-25%, 0, 0);
    }
  }
</style>